(function simulateStealthMouse() {
    let mouseX = window.innerWidth / 2, mouseY = window.innerHeight / 2;
    let targetX = mouseX, targetY = mouseY;
    let isTabActive = true;
    let isTyping = false;

    // Detect if the tab is active
    document.addEventListener("visibilitychange", () => {
        isTabActive = !document.hidden;
    });

    // Detect if user is typing (to avoid weird behavior when real input is happening)
    document.addEventListener("keydown", () => isTyping = true);
    document.addEventListener("keyup", () => isTyping = false);

    // Generate random target with slight jerks
    function getRandomTarget() {
        return {
            x: Math.random() * window.innerWidth,
            y: Math.random() * window.innerHeight
        };
    }

    // Smooth movement with random acceleration
    function moveMouse() {
        if (!isTabActive || isTyping) return setTimeout(moveMouse, 500); // Stop if user is typing or tab is inactive

        // If close to target, generate a new one with random hesitation
        if (Math.abs(mouseX - targetX) < 5 && Math.abs(mouseY - targetY) < 5) {
            targetX = getRandomTarget().x;
            targetY = getRandomTarget().y;
            if (Math.random() < 0.3) return setTimeout(moveMouse, Math.random() * 1000 + 300); // Random pause
        }

        // Simulate human-like jerky movement with random acceleration
        let speedFactor = Math.random() * 0.1 + 0.05; // Randomized speed
        let jitterX = (Math.random() - 0.5) * 3; // Small random jerks
        let jitterY = (Math.random() - 0.5) * 3;

        mouseX += (targetX - mouseX) * speedFactor + jitterX;
        mouseY += (targetY - mouseY) * speedFactor + jitterY;

        let eventTarget = document.elementFromPoint(mouseX, mouseY);

        if (eventTarget) {
            eventTarget.dispatchEvent(new MouseEvent("mousemove", { bubbles: true, clientX: mouseX, clientY: mouseY }));
            eventTarget.dispatchEvent(new MouseEvent("mouseover", { bubbles: true, clientX: mouseX, clientY: mouseY }));
            eventTarget.dispatchEvent(new MouseEvent("mouseenter", { bubbles: true, clientX: mouseX, clientY: mouseY }));
            eventTarget.dispatchEvent(new MouseEvent("mouseleave", { bubbles: true, clientX: mouseX, clientY: mouseY }));
        }

        requestAnimationFrame(moveMouse);
    }

    moveMouse();
})();
